#!/usr/bin/python
#------------------------------------------------------------------------------
# Copyright 2016 Cisco Systems
#------------------------------------------------------------------------------

DOCUMENTATION = """
---
module: iosxr_clear_log
author: "Adisorn Ermongkonchai"
short_description: Rollback configuration
description:
  - Rollback IOS-XR configuration
options:
  rollback_id:
    description:
      - rollback configuration committted to particular id
        e.g. 1000000012
    required: false
    default: None
  to_rollback_id:
    description:
      - rollback up to (and including) a specific commit
        e.g. 1000000012
    required: false
    default: None
  to_exclude_rollback_id:
    description:
      - rollback up to (and excluding) a specific commit
        e.g. 1000000012
    required: false
    default: None
  last_n_committed:
    description:
      - rollback configuration last N committted made
        e.g. 5
    required: false
    default: None
  label:
    description:
      - assign a label to this commit
    required: false
  force:
    description:
      - force reaload without doing any cleanup
    required: false
    default: false
  logfile:
    description:
      - log output to file
    required: false
    default: /tmp/iosxr_rollback.log
"""

EXAMPLES = """
- iosxr_reload:
    force: True

"""

def main():
    module = AnsibleModule(
        argument_spec = dict(
            rollback_id = dict(required=False, default=None),
            to_rollback_id = dict(required=False, default=None),
            to_exclude_rollback_id = dict(required=False, default=None),
            last_n_committed = dict(required=False, type='int', default=None),
            label    = dict(required=False, default=None),
            force    = dict(required=False, type='bool', default=False),
            logfile  = dict(required=False,
                            default='/tmp/iosxr_rollback.log')
        ),
        mutually_exclusive = (
            [ 'rollback_id',
              'to_rollback_id',
              'to_exclude_rollback_id',
              'last_n_committed' ],
        ),
        supports_check_mode = True
    )
    args = module.params
    force = args['force']
    rollback_id = args['rollback_id']
    to_id = args['to_rollback_id']
    to_excl_id = args['to_exclude_rollback_id']
    last_n = args['last_n_committed']
    label = args['label']
    force = args['force']

    reload_command = 'source /etc/profile ; nsenter -t 1 -n -- config_rollback '
    if rollback_id != None:
        reload_command = reload_command + '-j %s ' % rollback_id
    if to_id != None:
        reload_command = reload_command + '-i %s ' % to_id
    if to_excl_id != None:
        reload_command = reload_command + '-u %s ' % to_excl_id
    if last_n != None:
        reload_command = reload_command + '-n %s ' % hex(last_n)
    if force is True:
        reload_command = reload_command + '-f '
    if label != None:
        reload_command = reload_command + '-l %s ' % label
    #return module.fail_json(msg=reload_command)
    (rc, out, err) = module.run_command(reload_command, use_unsafe_shell=True)
  
    result = dict(changed=False)
    result['stdout'] = err
    with open(args['logfile'], "a") as logfile:
        logfile.write(result['stdout'][0])
    if 'successfully' in result['stdout']:
        result['changed'] = True
        result['stdout_lines'] = str(result['stdout']).split(r'\n')
        return module.exit_json(**result)
    else:
        return module.fail_json(msg=result['stdout'])

from ansible.module_utils.basic import *

if __name__ == "__main__":
    main()
