#!/usr/bin/python
#------------------------------------------------------------------------------
# Copyright 2016 Cisco Systems
#------------------------------------------------------------------------------

DOCUMENTATION = """
---
module: iosxr_install_config
author: "Adisorn Ermongkonchai"
short_description: Commit configuration file on IOS-XR devices.
description:
  - Install IOS-XR package or SMU (Software Maintenance Updates)
    on the IOS-XR node.
options:
  host:
    description:
      - IP address or hostname (resolvable by Ansible control host) of
        the target IOS-XR node.
    required: true
  username:
    description:
      - username used to login to IOS-XR
    required: true
  password:
    description:
      - password used to login to IOS-XR
    required: true
  cfgname:
    description:
      - configuration file must already be in /disk0: directory
    required: true
  replace:
    description:
      - remove all current running-config and apply new config
    required: true
  force:
    description:
      - override the memory checks
    required: true
  label:
    description:
      - assign a label to this commit
    required: true
  logfile:
    description:
      - log output to file
    required: false
    default: /tmp/iosxr_install_config.log

"""

EXAMPLES = """

- iosxr_install_config:
    username: cisco
    password: cisco
    cfgname: "add_user.cfg"
    label: "bgp_config_commit"

"""

RETURN = """
stdout:
  description: the set of responses from the commands
  returned: always
  type: list
  sample: ['...', '...']
"""

def main():
    module = AnsibleModule(
        argument_spec = dict(
            cfgname  = dict(required=True),
            label    = dict(required=False, default=None),
            logfile  = dict(required=False,
                            default='/tmp/iosxr_install_config.log'),
        ),
        supports_check_mode=True
    )
    args = module.params
    cfg_name = args['cfgname']
    label = args['label']
  
    # prepare options
    options = "-f %s" % cfg_name
    if label != None:
        options = "-l %s %s" % (label, options)
    cmd = "source /etc/profile ; nsenter -t 1 -n -- config %s" % options

    # load configuration
    (rc, out, err) = module.run_command(cmd, use_unsafe_shell=True)
  
    # prepare result
    result = dict(changed=True)
    result['stdout'] = out if out != "" else err
    result['stdout_lines'] = str(result['stdout']).splitlines()

    # log to file and return result
    with open(args['logfile'], "a") as logfile:
        logfile.write(result['stdout'])
        logfile.close()
    module.exit_json(**result)

from ansible.module_utils.basic import *

if __name__ == "__main__":
    main()
