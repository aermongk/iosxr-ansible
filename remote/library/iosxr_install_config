#!/usr/bin/python
#------------------------------------------------------------------------------
# Copyright 2016 Cisco Systems
#------------------------------------------------------------------------------

from ansible.module_utils.basic import *

DOCUMENTATION = """
---
module: iosxr_install_config
author: Adisorn Ermongkonchai
short_description: Commit configuration file on IOS-XR node.
description:
  - Install IOS-XR package or SMU (Software Maintenance Updates)
    on the IOS-XR node.
options:
  cfgname:
    description:
      - fully qualified config filename, e.g. tftp://192.168.1.1/user_add.cfg
    required: true
  label:
    description:
      - assign a label to this commit
    required: false
    default: none
  logfile:
    description:
      - log output to file
    required: false
    default: /tmp/iosxr_install_config.log
"""

EXAMPLES = """
- iosxr_install_config:
    cfgname: "/tftp://192.168.1.1/user_add.cfg"
    label: "bgp_config_commit"

"""

RETURN = """
stdout:                               
  description: raw response
  returned: always
stdout_lines:   
  description: list of response lines
  returned: always
"""

def main():
    module = AnsibleModule(
        argument_spec = dict(
            cfgname  = dict(required=True),
            label    = dict(required=False, default=None),
            logfile  = dict(required=False,
                            default='/tmp/iosxr_install_config.log'),
        ),
        supports_check_mode=True
    )
    args = module.params
    cfg_name = args['cfgname']
    label = args['label']
  
    load_command = 'config -f %s ' % cfg_name
    if label != None:
        load_label = load_label + '-l "%s"' % label
    command = "source /etc/profile ; nsenter -t 1 -n -- %s" % \
              load_command
    (rc, out, err) = module.run_command(command, use_unsafe_shell=True)

    # check for error
    if err != "":
        module.fail_json(msg=err)
  
    # prepare result
    result = dict(changed=True)
    result['stdout'] = out if out != "" else err
    result['stdout_lines'] = str(result['stdout']).splitlines()

    # log to file and return result
    with open(args['logfile'], "a") as logfile:
        logfile.write(result['stdout'])
    module.exit_json(**result)

if __name__ == "__main__":
    main()
