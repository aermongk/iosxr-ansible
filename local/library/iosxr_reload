#!/usr/bin/python
#------------------------------------------------------------------------------
# Copyright 2016 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#------------------------------------------------------------------------------

from ansible.module_utils.basic import *
from ansible.module_utils.shell import *
from ansible.module_utils.netcfg import *
from ansible.module_utils.iosxr import *
from iosxr_common import *

DOCUMENTATION = """
---
module: iosxr_reload
author: Adisorn Ermongkonchai
short_description: Reload IOS-XR device
description:
  - Restart specified IOS-XR device
options:
  host:
    description:
      - IP address or hostname (resolvable by Ansible control host) of
        the target IOS-XR node.
    required: true
  username:
    description:
      - username used to login to IOS-XR
    required: true
    default: none
  password:
    description:
      - password used to login to IOS-XR
    required: true
    default: none
  confirm:
    description:
      - make sure user really want to reload
    required: true
    value: "yes" or other string
  location:
    description:
      - location of the node that needs to be reboot
        e.g. 0/RP0/CPU0
    required: false
    default: None
  force:
    description:
      - force reaload without doing any cleanup
    required: false
    default: false

"""

EXAMPLES = """
- iosxr_reload:
    host: '{{ ansible_ssh_host }}'
    username: cisco
    password: cisco
    confirm: yes
"""

RETURN = """
stdout:
  description: raw response
  returned: always
stdout_lines:
  description: list of response lines
  returned: always
"""

CLI_PROMPTS_RE.append(re.compile(r'[\r\n]?[a-zA-Z]{1}[a-zA-Z0-9-]*[confirm]]'))

def main():
    module = get_module(
        argument_spec = dict(
            username = dict(required=False, default=None),
            password = dict(required=False, default=None),
            confirm  = dict(required=True),
            location = dict(required=False, default=None),
            force    = dict(required=False, type='bool', default=False)
        ),
        supports_check_mode=True
    )
    args = module.params
    force = args['force']
    location = args['location']
    if args['confirm'] != 'yes':
        result['stdout'] = "reload aborted"
        module.exit_json(**result)
  
    reload_command = 'reload '
    if location != None:
        reload_command = reload_command + 'location %s ' % location
    if force is True:
        reload_command = reload_command + 'force '
    commands = to_list(reload_command)
    commands.append('\r')
    commands.append('\r')
    response = execute_command(module, commands)
  
    result = dict(changed=False)
    result['stdout'] = response
    result['stdout_lines'] = str(result['stdout']).split(r'\n')
    module.exit_json(**result)

if __name__ == "__main__":
  main()
