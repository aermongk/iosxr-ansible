#!/usr/bin/python
#
# Copyright 2016 Cisco Systems
#

DOCUMENTATION = """
---
module: iosxr_install_config
author: "Adisorn Ermongkonchai"
short_description: Commit configuration file on IOS-XR devices.
description:
  - Install IOS-XR package or SMU (Software Maintenance Updates)
    on the IOS-XR node.
options:
  host:
    description:
      - IP address or hostname (resolvable by Ansible control host) of
        the target IOS-XR node.
    required: true
  username:
    description:
      - username used to login to IOS-XR
    required: true
  password:
    description:
      - password used to login to IOS-XR
    required: true
  cfgname:
    description:
      - configuration file must already be in /disk0: directory
    required: true
  replace:
    description:
      - remove all current running-config and apply new config
    required: true
  force:
    description:
      - override commit blocks
    required: true
  label:
    description:
      - assign a label to this commit
    required: true
  logfile:
    description:
      - log output to file
    required: false
    default: /tmp/iosxr_install_config.log

"""

EXAMPLES = """

- iosxr_install_config:
    username: cisco
    password: cisco
    cfgname: "add_user.cfg"
    label: "bgp_config_commit"

"""

RETURN = """
stdout:
  description: the set of responses from the commands
  returned: always
  type: list
  sample: ['...', '...']
"""

def main():
    module = get_module(
        argument_spec = dict(
            username = dict(required=False, default='root'),
            password = dict(required=False, default='lab'),
            cfgname  = dict(required=True),
            label    = dict(required=False, default=None),
            replace  = dict(required=False, type='bool', default=False),
            force    = dict(required=False, type='bool', default=False),
            logfile  = dict(required=False,
                            default='/tmp/iosxr_install_config.log'),
        ),
        supports_check_mode=True
    )
    args = module.params
    cfg_name = args['cfgname']
    label = args['label']
    force = args['force']
    replace = args['replace']
    result = dict(changed=False)
  
    load_command = 'load ' + cfg_name
    commands = to_list(load_command)
    commands.insert(0, 'configure terminal')
  
    commit_command = 'commit '
    if replace is True:
        commit_command = commit_command + 'replace '
    if force is True:
        commit_command = commit_command + 'force '
    if label != None:
        commit_command = commit_command + 'label ' + label
    commands.append(commit_command)
    if replace is True:
        commands.append('yes')
    response = execute_command(module, commands)
  
    result['changed'] = True
    result['stdout'] = response
    result['stdout_lines'] = str(result['stdout']).split(r'\n')
    with open(args['logfile'], "a") as logfile:
        logfile.write(result['stdout'][0])
    module.exit_json(**result)

from ansible.module_utils.basic import *
from ansible.module_utils.shell import *
from ansible.module_utils.netcfg import *
from ansible.module_utils.iosxr import *
from iosxr_common import *

if __name__ == "__main__":
  main()
