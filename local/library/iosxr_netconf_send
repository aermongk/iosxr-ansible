#!/usr/bin/python
#------------------------------------------------------------------------------
# Copyright 2016 Cisco Systems
#------------------------------------------------------------------------------

from ansible.module_utils.basic import *
from ansible.module_utils.iosxr import *
from iosxr_common import *

DOCUMENTATION = """
---
module: iosxr_netconf_send
author: Adisorn Ermongkonchai
short_description: Performs Netconf XML RPC to IOS-XR node
description:
  - Performs Netconf XML RPC to IOS-XR node
options:
  host:
    description:
      - IP address or hostname (resolvable by Ansible control host) of
        the target IOS-XR node.
    required: true
  username:
    description:
      - username used to login to IOS-XR
    required: false
    default: none
  password:
    description:
      - password used to login to IOS-XR
    required: false
    default: none
  xmlfile:
    description:
      - XML file
    required: true
    example: nc_show_install_active.xml
      <?xml version="1.0" encoding="UTF-8"?>
      <rpc message-id="101" xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
        <get>
          <filter>
            <Operational>
              <SoftwareInstall>
                <Active/>
              </SoftwareInstall>
            </Operational>
          </filter>
        </get>
      </rpc>
"""

EXAMPLES = """
- iosxr_netconf_send:
    host: '{{ ansible_ssh_host }}'
    username: cisco
    password: cisco
    xmlfile: xml/nc_show_install_active.xml
"""

RETURN = """
stdout:
  description: raw response
  returned: always
stdout_lines:
  description: list of response lines
  returned: always
"""

CLI_PROMPTS_RE.append(re.compile(r']]>]]>[\r\n]?'))

def main():
    module = get_module(
        argument_spec = dict(
            xmlfile = dict(required=True)
        ),
        supports_check_mode = True
    )
    args = module.params
    xml_file = module.params['xmlfile']

    result = dict(changed=False)
    xml_text = open(xml_file).read()
    if 'edit-config' in xml_text:
        result['changed'] = True

    module.execute('netconf format')
    for line in open(xml_file):
        module.connection.shell.shell.send(line)
    module.connection.shell.shell.send(']]>]]>\r')

    # collect all responses 200 bytes at a time
    response = module.connection.shell.shell.recv(200)
    while ']]>]]>' not in response:
        response += module.connection.shell.shell.recv(200)

    # return active packages
    result['stdout'] = response
    result['stdout_lines'] = str(result['stdout']).splitlines()
    if "error-message" in response:
        return module.fail_json(msg=response)
    else:
        return module.exit_json(**result)

if __name__ == "__main__":
    main()
